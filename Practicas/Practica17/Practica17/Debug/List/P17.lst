
AVRASM ver. 2.1.30  C:\Users\alanm\Desktop\Microcontroladores\Practicas\Practica17\Practica17\Debug\List\P17.asm Tue Apr 25 15:44:01 2023

C:\Users\alanm\Desktop\Microcontroladores\Practicas\Practica17\Practica17\Debug\List\P17.asm(1415): warning: Register r5 already defined by the .DEF directive
C:\Users\alanm\Desktop\Microcontroladores\Practicas\Practica17\Practica17\Debug\List\P17.asm(1416): warning: Register r4 already defined by the .DEF directive
C:\Users\alanm\Desktop\Microcontroladores\Practicas\Practica17\Practica17\Debug\List\P17.asm(1417): warning: Register r7 already defined by the .DEF directive
C:\Users\alanm\Desktop\Microcontroladores\Practicas\Practica17\Practica17\Debug\List\P17.asm(1418): warning: Register r6 already defined by the .DEF directive
C:\Users\alanm\Desktop\Microcontroladores\Practicas\Practica17\Practica17\Debug\List\P17.asm(1419): warning: Register r9 already defined by the .DEF directive
C:\Users\alanm\Desktop\Microcontroladores\Practicas\Practica17\Practica17\Debug\List\P17.asm(1420): warning: Register r8 already defined by the .DEF directive
C:\Users\alanm\Desktop\Microcontroladores\Practicas\Practica17\Practica17\Debug\List\P17.asm(1421): warning: Register r11 already defined by the .DEF directive
C:\Users\alanm\Desktop\Microcontroladores\Practicas\Practica17\Practica17\Debug\List\P17.asm(1422): warning: Register r12 already defined by the .DEF directive
C:\Users\alanm\Desktop\Microcontroladores\Practicas\Practica17\Practica17\Debug\List\P17.asm(1423): warning: Register r13 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.51 
                 ;(C) Copyright 1998-2023 Pavel Haiduc, HP InfoTech S.R.L.
                 ;http://www.hpinfotech.ro
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega8535
                 ;Program type           : Application
                 ;Clock frequency        : 1.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 128 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Mode 2
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega8535
                 	#pragma AVRPART MEMORY PROG_FLASH 8192
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 512
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU SPMCSR=0x37
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x025F
                 	.EQU __DSTACK_SIZE=0x0080
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.EQU __FLASH_PAGE_SIZE=0x20
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETW1P
                 	LD   R30,X+
                 	LD   R31,X
                 	SBIW R26,1
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD1P_INC
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X+
                 	LD   R23,X+
                 	.ENDM
                 
                 	.MACRO __GETD1P_DEC
                 	LD   R23,-X
                 	LD   R22,-X
                 	LD   R31,-X
                 	LD   R30,-X
                 	.ENDM
                 
                 	.MACRO __PUTDP1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTDP1_DEC
                 	ST   -X,R23
                 	ST   -X,R22
                 	ST   -X,R31
                 	ST   -X,R30
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __CPD10
                 	SBIW R30,0
                 	SBCI R22,0
                 	SBCI R23,0
                 	.ENDM
                 
                 	.MACRO __CPD20
                 	SBIW R26,0
                 	SBCI R24,0
                 	SBCI R25,0
                 	.ENDM
                 
                 	.MACRO __ADDD12
                 	ADD  R30,R26
                 	ADC  R31,R27
                 	ADC  R22,R24
                 	ADC  R23,R25
                 	.ENDM
                 
                 	.MACRO __ADDD21
                 	ADD  R26,R30
                 	ADC  R27,R31
                 	ADC  R24,R22
                 	ADC  R25,R23
                 	.ENDM
                 
                 	.MACRO __SUBD12
                 	SUB  R30,R26
                 	SBC  R31,R27
                 	SBC  R22,R24
                 	SBC  R23,R25
                 	.ENDM
                 
                 	.MACRO __SUBD21
                 	SUB  R26,R30
                 	SBC  R27,R31
                 	SBC  R24,R22
                 	SBC  R25,R23
                 	.ENDM
                 
                 	.MACRO __ANDD12
                 	AND  R30,R26
                 	AND  R31,R27
                 	AND  R22,R24
                 	AND  R23,R25
                 	.ENDM
                 
                 	.MACRO __ORD12
                 	OR   R30,R26
                 	OR   R31,R27
                 	OR   R22,R24
                 	OR   R23,R25
                 	.ENDM
                 
                 	.MACRO __XORD12
                 	EOR  R30,R26
                 	EOR  R31,R27
                 	EOR  R22,R24
                 	EOR  R23,R25
                 	.ENDM
                 
                 	.MACRO __XORD21
                 	EOR  R26,R30
                 	EOR  R27,R31
                 	EOR  R24,R22
                 	EOR  R25,R23
                 	.ENDM
                 
                 	.MACRO __COMD1
                 	COM  R30
                 	COM  R31
                 	COM  R22
                 	COM  R23
                 	.ENDM
                 
                 	.MACRO __MULD2_2
                 	LSL  R26
                 	ROL  R27
                 	ROL  R24
                 	ROL  R25
                 	.ENDM
                 
                 	.MACRO __LSRD1
                 	LSR  R23
                 	ROR  R22
                 	ROR  R31
                 	ROR  R30
                 	.ENDM
                 
                 	.MACRO __LSLD1
                 	LSL  R30
                 	ROL  R31
                 	ROL  R22
                 	ROL  R23
                 	.ENDM
                 
                 	.MACRO __ASRB4
                 	ASR  R30
                 	ASR  R30
                 	ASR  R30
                 	ASR  R30
                 	.ENDM
                 
                 	.MACRO __ASRW8
                 	MOV  R30,R31
                 	CLR  R31
                 	SBRC R30,7
                 	SER  R31
                 	.ENDM
                 
                 	.MACRO __LSRD16
                 	MOV  R30,R22
                 	MOV  R31,R23
                 	LDI  R22,0
                 	LDI  R23,0
                 	.ENDM
                 
                 	.MACRO __LSLD16
                 	MOV  R22,R30
                 	MOV  R23,R31
                 	LDI  R30,0
                 	LDI  R31,0
                 	.ENDM
                 
                 	.MACRO __CWD1
                 	MOV  R22,R31
                 	ADD  R22,R22
                 	SBC  R22,R22
                 	MOV  R23,R22
                 	.ENDM
                 
                 	.MACRO __CWD2
                 	MOV  R24,R27
                 	ADD  R24,R24
                 	SBC  R24,R24
                 	MOV  R25,R24
                 	.ENDM
                 
                 	.MACRO __SETMSD1
                 	SER  R31
                 	SER  R22
                 	SER  R23
                 	.ENDM
                 
                 	.MACRO __ADDW1R15
                 	CLR  R0
                 	ADD  R30,R15
                 	ADC  R31,R0
                 	.ENDM
                 
                 	.MACRO __ADDW2R15
                 	CLR  R0
                 	ADD  R26,R15
                 	ADC  R27,R0
                 	.ENDM
                 
                 	.MACRO __EQB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BREQ PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __NEB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRNE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LEB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRGE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GEB12
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRGE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LTB12
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRLT PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GTB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRLT PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LEB12U
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRSH PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GEB12U
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRSH PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LTB12U
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRLO PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GTB12U
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRLO PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __CPW01
                 	CLR  R0
                 	CP   R0,R30
                 	CPC  R0,R31
                 	.ENDM
                 
                 	.MACRO __CPW02
                 	CLR  R0
                 	CP   R0,R26
                 	CPC  R0,R27
                 	.ENDM
                 
                 	.MACRO __CPD12
                 	CP   R30,R26
                 	CPC  R31,R27
                 	CPC  R22,R24
                 	CPC  R23,R25
                 	.ENDM
                 
                 	.MACRO __CPD21
                 	CP   R26,R30
                 	CPC  R27,R31
                 	CPC  R24,R22
                 	CPC  R25,R23
                 	.ENDM
                 
                 	.MACRO __BSTB1
                 	CLT
                 	TST  R30
                 	BREQ PC+2
                 	SET
                 	.ENDM
                 
                 	.MACRO __LNEGB1
                 	TST  R30
                 	LDI  R30,1
                 	BREQ PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LNEGW1
                 	OR   R30,R31
                 	LDI  R30,1
                 	BREQ PC+2
                 	LDI  R30,0
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2M
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	RCALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	RCALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	RCALL __GETW1Z
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	RCALL __GETD1Z
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	RCALL __GETW2X
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	RCALL __GETD2X
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _modo=R5
                 	.DEF _columnas=R4
                 	.DEF _filas=R7
                 	.DEF _indice=R6
                 	.DEF _numero=R9
                 	.DEF _repetir=R8
                 	.DEF _renglon=R11
                 	.DEF _cambio_caso=R12
                 	.DEF _cambio_caso_msb=R13
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 c0b3      	RJMP __RESET
000001 cffe      	RJMP 0x00
000002 cffd      	RJMP 0x00
000003 cffc      	RJMP 0x00
000004 cffb      	RJMP 0x00
000005 cffa      	RJMP 0x00
000006 cff9      	RJMP 0x00
000007 cff8      	RJMP 0x00
000008 cff7      	RJMP 0x00
000009 cff6      	RJMP 0x00
00000a cff5      	RJMP 0x00
00000b cff4      	RJMP 0x00
00000c cff3      	RJMP 0x00
00000d cff2      	RJMP 0x00
00000e cff1      	RJMP 0x00
00000f cff0      	RJMP 0x00
000010 cfef      	RJMP 0x00
000011 cfee      	RJMP 0x00
000012 cfed      	RJMP 0x00
000013 cfec      	RJMP 0x00
000014 cfeb      	RJMP 0x00
                 
                 ;REGISTER BIT VARIABLES INITIALIZATION
                 __REG_BIT_VARS:
000015 0000      	.DW  0x0000
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000016 0501
000017 0000      	.DB  0x1,0x5,0x0,0x0
000018 0000
000019 0000      	.DB  0x0,0x0,0x0,0x0
00001a 0000      	.DB  0x0,0x0
                 
                 _0x3:
00001b ffff
00001c ffff
00001d ffff
C:\Users\alanm\Desktop\Microcontroladores\Practicas\Practica17\Practica17\Debug\List\P17.asm(1465): warning: .cseg .db misalignment - padding zero byte
00001e 00ff      	.DB  0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
                 _0x4:
00001f 0101
000020 0101
000021 0201
000022 0202      	.DB  0x1,0x1,0x1,0x1,0x1,0x2,0x2,0x2
000023 0202
000024 0404
000025 0404
000026 0804      	.DB  0x2,0x2,0x4,0x4,0x4,0x4,0x4,0x8
000027 0808
000028 0808
000029 1010
00002a 1010      	.DB  0x8,0x8,0x8,0x8,0x10,0x10,0x10,0x10
00002b 2010
00002c 2020
00002d 2020
00002e 4040      	.DB  0x10,0x20,0x20,0x20,0x20,0x20,0x40,0x40
00002f 4040
C:\Users\alanm\Desktop\Microcontroladores\Practicas\Practica17\Practica17\Debug\List\P17.asm(1471): warning: .cseg .db misalignment - padding zero byte
000030 0040      	.DB  0x40,0x40,0x40
                 _0x5:
000031 2e41
000032 3a36
000033 3f41
000034 003d      	.DB  0x41,0x2E,0x36,0x3A,0x41,0x3F,0x3D,0x0
000035 3f3f
000036 1e3d
000037 362e
000038 5d39      	.DB  0x3F,0x3F,0x3D,0x1E,0x2E,0x36,0x39,0x5D
000039 363e
00003a 4936
00003b 6b67
00003c 006d      	.DB  0x3E,0x36,0x36,0x49,0x67,0x6B,0x6D,0x0
00003d 587f
00003e 3a3a
00003f 463a
000040 3543      	.DB  0x7F,0x58,0x3A,0x3A,0x3A,0x46,0x43,0x35
000041 3636
000042 7c4f
000043 0e7e
000044 7876      	.DB  0x36,0x36,0x4F,0x7C,0x7E,0xE,0x76,0x78
000045 3649
000046 3636
000047 7949
000048 3636      	.DB  0x49,0x36,0x36,0x36,0x49,0x79,0x36,0x36
000049 6956      	.DB  0x56,0x69
                 _0x6:
00004a 7f7f
00004b 7f7f
00004c 7f7f
00004d 7601      	.DB  0x7F,0x7F,0x7F,0x7F,0x7F,0x7F,0x1,0x76
00004e 7676
00004f 7f01
000050 3f00
000051 3f3f      	.DB  0x76,0x76,0x1,0x7F,0x0,0x3F,0x3F,0x3F
000052 7f3f
000053 7601
000054 7676
000055 7f01      	.DB  0x3F,0x7F,0x1,0x76,0x76,0x76,0x1,0x7F
000056 7b00
000057 6f77
000058 7f00
000059 7f7f      	.DB  0x0,0x7B,0x77,0x6F,0x0,0x7F,0x7F,0x7F
00005a 7f7f
00005b 7f7f
00005c 7d00
00005d 7d7b      	.DB  0x7F,0x7F,0x7F,0x7F,0x0,0x7D,0x7B,0x7D
00005e 7f00
00005f 7601
000060 7676
000061 7f01      	.DB  0x0,0x7F,0x1,0x76,0x76,0x76,0x1,0x7F
000062 3f00
000063 3f3f
000064 7f3f
000065 7601      	.DB  0x0,0x3F,0x3F,0x3F,0x3F,0x7F,0x1,0x76
000066 7676
000067 7f01
000068 3e41
000069 3636      	.DB  0x76,0x76,0x1,0x7F,0x41,0x3E,0x36,0x36
00006a 7f45
00006b 3e41
00006c 3e3e
00006d 7f41      	.DB  0x45,0x7F,0x41,0x3E,0x3E,0x3E,0x41,0x7F
00006e 7b00
00006f 6f77
000070 7f00
000071 7f7f      	.DB  0x0,0x7B,0x77,0x6F,0x0,0x7F,0x7F,0x7F
000072 7f7f
000073 7f7f
000074 3f5f
000075 3f3f      	.DB  0x7F,0x7F,0x7F,0x7F,0x5F,0x3F,0x3F,0x3F
000076 7f40
000077 3e41
000078 3e3e
000079 7f41      	.DB  0x40,0x7F,0x41,0x3E,0x3E,0x3E,0x41,0x7F
00007a 7600
00007b 5666
00007c 7f39
00007d 3e41      	.DB  0x0,0x76,0x66,0x56,0x39,0x7F,0x41,0x3E
00007e 3636
00007f 7f45
000080 3600
000081 3636      	.DB  0x36,0x36,0x45,0x7F,0x0,0x36,0x36,0x36
000082 7f3e
000083 7f7f
000084 7f7f
000085 7f7f      	.DB  0x3E,0x7F,0x7F,0x7F,0x7F,0x7F,0x7F,0x7F
000086 7d00
000087 7d7b
000088 7f00
000089 7601      	.DB  0x0,0x7D,0x7B,0x7D,0x0,0x7F,0x1,0x76
00008a 7676
00008b 7f01
00008c 7600
00008d 5666      	.DB  0x76,0x76,0x1,0x7F,0x0,0x76,0x66,0x56
00008e 7f39
00008f 7e7e
000090 7e00
000091 7f7e      	.DB  0x39,0x7F,0x7E,0x7E,0x0,0x7E,0x7E,0x7F
000092 3e7f
000093 3e00
000094 7f7f
000095 7b00      	.DB  0x7F,0x3E,0x0,0x3E,0x7F,0x7F,0x0,0x7B
000096 6f77
000097 7f00
000098 3600
000099 3636      	.DB  0x77,0x6F,0x0,0x7F,0x0,0x36,0x36,0x36
00009a 7f3e
00009b 2e1e
00009c 3a36
00009d 7f3c      	.DB  0x3E,0x7F,0x1E,0x2E,0x36,0x3A,0x3C,0x7F
00009e 7f7f
00009f 7f7f
0000a0 7f7f      	.DB  0x7F,0x7F,0x7F,0x7F,0x7F,0x7F
                 
                 __GLOBAL_INI_TBL:
0000a1 0001      	.DW  0x01
0000a2 0002      	.DW  0x02
0000a3 002a      	.DW  __REG_BIT_VARS*2
                 
0000a4 000a      	.DW  0x0A
0000a5 0004      	.DW  0x04
0000a6 002c      	.DW  __REG_VARS*2
                 
0000a7 0007      	.DW  0x07
0000a8 00e0      	.DW  _modoCero
0000a9 0036      	.DW  _0x3*2
                 
0000aa 0023      	.DW  0x23
0000ab 00e7      	.DW  _modoUno
0000ac 003e      	.DW  _0x4*2
                 
0000ad 0032      	.DW  0x32
0000ae 010a      	.DW  _modoCuatro
0000af 0062      	.DW  _0x5*2
                 
0000b0 00ae      	.DW  0xAE
0000b1 013c      	.DW  _modoCinco
0000b2 0094      	.DW  _0x6*2
                 
                 _0xFFFFFFFF:
0000b3 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
0000b4 94f8      	CLI
0000b5 27ee      	CLR  R30
0000b6 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
0000b7 e0f1      	LDI  R31,1
0000b8 bffb      	OUT  GICR,R31
0000b9 bfeb      	OUT  GICR,R30
0000ba bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
0000bb e08d      	LDI  R24,(14-2)+1
0000bc e0a2      	LDI  R26,2
0000bd 27bb      	CLR  R27
                 __CLEAR_REG:
0000be 93ed      	ST   X+,R30
0000bf 958a      	DEC  R24
0000c0 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
0000c1 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
0000c2 e092      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
0000c3 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
0000c4 93ed      	ST   X+,R30
0000c5 9701      	SBIW R24,1
0000c6 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
0000c7 e4e2      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
0000c8 e0f1      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
0000c9 9185      	LPM  R24,Z+
0000ca 9195      	LPM  R25,Z+
0000cb 9700      	SBIW R24,0
0000cc f061      	BREQ __GLOBAL_INI_END
0000cd 91a5      	LPM  R26,Z+
0000ce 91b5      	LPM  R27,Z+
0000cf 9005      	LPM  R0,Z+
0000d0 9015      	LPM  R1,Z+
0000d1 01bf      	MOVW R22,R30
0000d2 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
0000d3 9005      	LPM  R0,Z+
0000d4 920d      	ST   X+,R0
0000d5 9701      	SBIW R24,1
0000d6 f7e1      	BRNE __GLOBAL_INI_LOOP
0000d7 01fb      	MOVW R30,R22
0000d8 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
0000d9 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
0000da bfed      	OUT  SPL,R30
0000db e0e2      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
0000dc bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
0000dd eec0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
0000de e0d0      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
0000df c032      	RJMP _main
                 
                 	.ESEG
                 	.ORG 0x00
                 
                 	.DSEG
                 	.ORG 0xE0
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 
                 	.DSEG
                 ;void cambiar_modo(){
                 ; 0000 005C void cambiar_modo(){
                 
                 	.CSEG
                 _cambiar_modo:
                 ; .FSTART _cambiar_modo
                 ; 0000 005D cambio_caso = 0;
0000e0 24cc      	CLR  R12
0000e1 24dd      	CLR  R13
                 ; 0000 005E indice = 0;
0000e2 2466      	CLR  R6
                 ; 0000 005F renglon = 0;
0000e3 24bb      	CLR  R11
                 ; 0000 0060 numero = 0;
0000e4 2499      	CLR  R9
                 ; 0000 0061 repetir = 0;
0000e5 2488      	CLR  R8
                 ; 0000 0062 columnas = 0x01;
0000e6 e0e1      	LDI  R30,LOW(1)
0000e7 2e4e      	MOV  R4,R30
                 ; 0000 0063 modo++;
0000e8 9453      	INC  R5
                 ; 0000 0064 puede_cambiar = 0;
0000e9 94e8      	CLT
0000ea f820      	BLD  R2,0
                 ; 0000 0065 if (modo == 6) modo = 0;
0000eb e0e6      	LDI  R30,LOW(6)
0000ec 15e5      	CP   R30,R5
0000ed f409      	BRNE _0x7
0000ee 2455      	CLR  R5
                 ; 0000 0066 }
                 _0x7:
0000ef 9508      	RET
                 ; .FEND
                 ;char *obtenerArreglo(int pos){
                 ; 0000 006A char *obtenerArreglo(int pos){
                 _obtenerArreglo:
                 ; .FSTART _obtenerArreglo
                 ; 0000 006B char arr[5];
                 ; 0000 006C int i, j=0;
                 ; 0000 006D for(i=pos;i<pos+5;i++){
0000f0 9725      	SBIW R28,5
0000f1 d11f      	RCALL __SAVELOCR6
0000f2 01ad      	MOVW R20,R26
                 ;	pos -> R20,R21
                 ;	arr -> Y+6
                 ;	i -> R16,R17
                 ;	j -> R18,R19
                +
0000f3 e020     +LDI R18 , LOW ( 0 )
0000f4 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
0000f5 018a      	MOVW R16,R20
                 _0x9:
0000f6 01fa      	MOVW R30,R20
0000f7 9635      	ADIW R30,5
0000f8 170e      	CP   R16,R30
0000f9 071f      	CPC  R17,R31
0000fa f494      	BRGE _0xA
                 ; 0000 006E arr[j] = modoCinco[i];
0000fb 01f9      	MOVW R30,R18
0000fc 01de      	MOVW R26,R28
0000fd 9616      	ADIW R26,6
0000fe 0fea      	ADD  R30,R26
0000ff 1ffb      	ADC  R31,R27
000100 010f      	MOVW R0,R30
000101 e3ac      	LDI  R26,LOW(_modoCinco)
000102 e0b1      	LDI  R27,HIGH(_modoCinco)
000103 0fa0      	ADD  R26,R16
000104 1fb1      	ADC  R27,R17
000105 91ec      	LD   R30,X
000106 01d0      	MOVW R26,R0
000107 93ec      	ST   X,R30
                 ; 0000 006F j++;
                +
000108 5f2f     +SUBI R18 , LOW ( - 1 )
000109 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
                 ; 0000 0070 }
                +
00010a 5f0f     +SUBI R16 , LOW ( - 1 )
00010b 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
00010c cfe9      	RJMP _0x9
                 _0xA:
                 ; 0000 0071 return arr;
00010d 01fe      	MOVW R30,R28
00010e 9636      	ADIW R30,6
00010f d108      	RCALL __LOADLOCR6
000110 962b      	ADIW R28,11
000111 9508      	RET
                 ; 0000 0072 }
                 ; .FEND
                 ;void main(void)
                 ; 0000 0075 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0076 // Declare your local variables here
                 ; 0000 0077 
                 ; 0000 0078 // Input/Output Ports initialization
                 ; 0000 0079 // Port A initialization
                 ; 0000 007A // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 007B DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
000112 e0e0      	LDI  R30,LOW(0)
000113 bbea      	OUT  0x1A,R30
                 ; 0000 007C // State: Bit7=P Bit6=P Bit5=P Bit4=P Bit3=P Bit2=P Bit1=P Bit0=P
                 ; 0000 007D PORTA=(1<<PORTA7) | (1<<PORTA6) | (1<<PORTA5) | (1<<PORTA4) | (1<<PORTA3) | (1<<PORTA2) | (1<<PORTA1) | (1<<PORTA0);
000114 efef      	LDI  R30,LOW(255)
000115 bbeb      	OUT  0x1B,R30
                 ; 0000 007E 
                 ; 0000 007F // Port B initialization
                 ; 0000 0080 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0081 DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
000116 e0e0      	LDI  R30,LOW(0)
000117 bbe7      	OUT  0x17,R30
                 ; 0000 0082 // State: Bit7=P Bit6=P Bit5=P Bit4=P Bit3=P Bit2=P Bit1=P Bit0=P
                 ; 0000 0083 PORTB=(1<<PORTB7) | (1<<PORTB6) | (1<<PORTB5) | (1<<PORTB4) | (1<<PORTB3) | (1<<PORTB2) | (1<<PORTB1) | (1<<PORTB0);
000118 efef      	LDI  R30,LOW(255)
000119 bbe8      	OUT  0x18,R30
                 ; 0000 0084 
                 ; 0000 0085 // Port C initialization
                 ; 0000 0086 // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
                 ; 0000 0087 DDRC=(1<<DDC7) | (1<<DDC6) | (1<<DDC5) | (1<<DDC4) | (1<<DDC3) | (1<<DDC2) | (1<<DDC1) | (1<<DDC0);
00011a bbe4      	OUT  0x14,R30
                 ; 0000 0088 // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
                 ; 0000 0089 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
00011b e0e0      	LDI  R30,LOW(0)
00011c bbe5      	OUT  0x15,R30
                 ; 0000 008A 
                 ; 0000 008B // Port D initialization
                 ; 0000 008C // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
                 ; 0000 008D DDRD=(1<<DDD7) | (1<<DDD6) | (1<<DDD5) | (1<<DDD4) | (1<<DDD3) | (1<<DDD2) | (1<<DDD1) | (1<<DDD0);
00011d efef      	LDI  R30,LOW(255)
00011e bbe1      	OUT  0x11,R30
                 ; 0000 008E // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
                 ; 0000 008F PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
00011f e0e0      	LDI  R30,LOW(0)
000120 bbe2      	OUT  0x12,R30
                 ; 0000 0090 
                 ; 0000 0091 // Timer/Counter 0 initialization
                 ; 0000 0092 // Clock source: System Clock
                 ; 0000 0093 // Clock value: Timer 0 Stopped
                 ; 0000 0094 // Mode: Normal top=0xFF
                 ; 0000 0095 // OC0 output: Disconnected
                 ; 0000 0096 TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (0<<CS00);
000121 bfe3      	OUT  0x33,R30
                 ; 0000 0097 TCNT0=0x00;
000122 bfe2      	OUT  0x32,R30
                 ; 0000 0098 OCR0=0x00;
000123 bfec      	OUT  0x3C,R30
                 ; 0000 0099 
                 ; 0000 009A // Timer/Counter 1 initialization
                 ; 0000 009B // Clock source: System Clock
                 ; 0000 009C // Clock value: Timer1 Stopped
                 ; 0000 009D // Mode: Normal top=0xFFFF
                 ; 0000 009E // OC1A output: Disconnected
                 ; 0000 009F // OC1B output: Disconnected
                 ; 0000 00A0 // Noise Canceler: Off
                 ; 0000 00A1 // Input Capture on Falling Edge
                 ; 0000 00A2 // Timer1 Overflow Interrupt: Off
                 ; 0000 00A3 // Input Capture Interrupt: Off
                 ; 0000 00A4 // Compare A Match Interrupt: Off
                 ; 0000 00A5 // Compare B Match Interrupt: Off
                 ; 0000 00A6 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
000124 bdef      	OUT  0x2F,R30
                 ; 0000 00A7 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
000125 bdee      	OUT  0x2E,R30
                 ; 0000 00A8 TCNT1H=0x00;
000126 bded      	OUT  0x2D,R30
                 ; 0000 00A9 TCNT1L=0x00;
000127 bdec      	OUT  0x2C,R30
                 ; 0000 00AA ICR1H=0x00;
000128 bde7      	OUT  0x27,R30
                 ; 0000 00AB ICR1L=0x00;
000129 bde6      	OUT  0x26,R30
                 ; 0000 00AC OCR1AH=0x00;
00012a bdeb      	OUT  0x2B,R30
                 ; 0000 00AD OCR1AL=0x00;
00012b bdea      	OUT  0x2A,R30
                 ; 0000 00AE OCR1BH=0x00;
00012c bde9      	OUT  0x29,R30
                 ; 0000 00AF OCR1BL=0x00;
00012d bde8      	OUT  0x28,R30
                 ; 0000 00B0 
                 ; 0000 00B1 // Timer/Counter 2 initialization
                 ; 0000 00B2 // Clock source: System Clock
                 ; 0000 00B3 // Clock value: Timer2 Stopped
                 ; 0000 00B4 // Mode: Normal top=0xFF
                 ; 0000 00B5 // OC2 output: Disconnected
                 ; 0000 00B6 ASSR=0<<AS2;
00012e bde2      	OUT  0x22,R30
                 ; 0000 00B7 TCCR2=(0<<WGM20) | (0<<COM21) | (0<<COM20) | (0<<WGM21) | (0<<CS22) | (0<<CS21) | (0<<CS20);
00012f bde5      	OUT  0x25,R30
                 ; 0000 00B8 TCNT2=0x00;
000130 bde4      	OUT  0x24,R30
                 ; 0000 00B9 OCR2=0x00;
000131 bde3      	OUT  0x23,R30
                 ; 0000 00BA 
                 ; 0000 00BB // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 00BC TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
000132 bfe9      	OUT  0x39,R30
                 ; 0000 00BD 
                 ; 0000 00BE // External Interrupt(s) initialization
                 ; 0000 00BF // INT0: Off
                 ; 0000 00C0 // INT1: Off
                 ; 0000 00C1 // INT2: Off
                 ; 0000 00C2 MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
000133 bfe5      	OUT  0x35,R30
                 ; 0000 00C3 MCUCSR=(0<<ISC2);
000134 bfe4      	OUT  0x34,R30
                 ; 0000 00C4 
                 ; 0000 00C5 // USART initialization
                 ; 0000 00C6 // USART disabled
                 ; 0000 00C7 UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
000135 b9ea      	OUT  0xA,R30
                 ; 0000 00C8 
                 ; 0000 00C9 // Analog Comparator initialization
                 ; 0000 00CA // Analog Comparator: Off
                 ; 0000 00CB // The Analog Comparator's positive input is
                 ; 0000 00CC // connected to the AIN0 pin
                 ; 0000 00CD // The Analog Comparator's negative input is
                 ; 0000 00CE // connected to the AIN1 pin
                 ; 0000 00CF ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
000136 e8e0      	LDI  R30,LOW(128)
000137 b9e8      	OUT  0x8,R30
                 ; 0000 00D0 SFIOR=(0<<ACME);
000138 e0e0      	LDI  R30,LOW(0)
000139 bfe0      	OUT  0x30,R30
                 ; 0000 00D1 
                 ; 0000 00D2 // ADC initialization
                 ; 0000 00D3 // ADC disabled
                 ; 0000 00D4 ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
00013a b9e6      	OUT  0x6,R30
                 ; 0000 00D5 
                 ; 0000 00D6 // SPI initialization
                 ; 0000 00D7 // SPI disabled
                 ; 0000 00D8 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
00013b b9ed      	OUT  0xD,R30
                 ; 0000 00D9 
                 ; 0000 00DA // TWI initialization
                 ; 0000 00DB // TWI disabled
                 ; 0000 00DC TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
00013c bfe6      	OUT  0x36,R30
                 ; 0000 00DD 
                 ; 0000 00DE while (1)
                 _0xB:
                 ; 0000 00DF {
                 ; 0000 00E0 
                 ; 0000 00E1 switch (modo){
00013d 2de5      	MOV  R30,R5
00013e e0f0      	LDI  R31,0
                 ; 0000 00E2 case 0:
00013f 9730      	SBIW R30,0
000140 f451      	BRNE _0x11
                 ; 0000 00E3 filas = ~modoCero[indice];
000141 2de6      	MOV  R30,R6
000142 e0f0      	LDI  R31,0
000143 52e0      	SUBI R30,LOW(-_modoCero)
000144 4fff      	SBCI R31,HIGH(-_modoCero)
000145 81e0      	LD   R30,Z
000146 d0a9      	RCALL SUBOPT_0x0
                 ; 0000 00E4 delay_ms(100);
000147 e6a4      	LDI  R26,LOW(100)
000148 e0b0      	LDI  R27,0
000149 d0d5      	RCALL _delay_ms
                 ; 0000 00E5 break;
00014a c04e      	RJMP _0x10
                 ; 0000 00E6 
                 ; 0000 00E7 case 1:
                 _0x11:
00014b d0a7      	RCALL SUBOPT_0x1
00014c f461      	BRNE _0x12
                 ; 0000 00E8 filas = ~modoUno[renglon][indice];
00014d d0a9      	RCALL SUBOPT_0x2
                 ; 0000 00E9 repetir++;
00014e 9483      	INC  R8
                 ; 0000 00EA if (repetir == 5){
00014f e0e5      	LDI  R30,LOW(5)
000150 15e8      	CP   R30,R8
000151 f411      	BRNE _0x13
                 ; 0000 00EB renglon++;
000152 94b3      	INC  R11
                 ; 0000 00EC repetir = 0;
000153 2488      	CLR  R8
                 ; 0000 00ED }
                 ; 0000 00EE 
                 ; 0000 00EF if (renglon == 7) renglon = 0;
                 _0x13:
000154 e0e7      	LDI  R30,LOW(7)
000155 15eb      	CP   R30,R11
000156 f409      	BRNE _0x14
000157 24bb      	CLR  R11
                 ; 0000 00F0 break;
                 _0x14:
000158 c040      	RJMP _0x10
                 ; 0000 00F1 
                 ; 0000 00F2 case 2:
                 _0x12:
000159 d0a9      	RCALL SUBOPT_0x3
00015a f439      	BRNE _0x15
                 ; 0000 00F3 filas = ~modoUno[renglon][indice];
00015b d09b      	RCALL SUBOPT_0x2
                 ; 0000 00F4 renglon++;
00015c 94b3      	INC  R11
                 ; 0000 00F5 if (renglon == 7) renglon = 0;
00015d e0e7      	LDI  R30,LOW(7)
00015e 15eb      	CP   R30,R11
00015f f409      	BRNE _0x16
000160 24bb      	CLR  R11
                 ; 0000 00F6 break;
                 _0x16:
000161 c037      	RJMP _0x10
                 ; 0000 00F7 
                 ; 0000 00F8 case 3:
                 _0x15:
000162 30e3      	CPI  R30,LOW(0x3)
000163 e0a0      	LDI  R26,HIGH(0x3)
000164 07fa      	CPC  R31,R26
000165 f479      	BRNE _0x17
                 ; 0000 00F9 filas = ~modoUno[renglon][indice];
000166 d090      	RCALL SUBOPT_0x2
                 ; 0000 00FA delay_ms(100);
000167 e6a4      	LDI  R26,LOW(100)
000168 e0b0      	LDI  R27,0
000169 d0b5      	RCALL _delay_ms
                 ; 0000 00FB repetir++;
00016a 9483      	INC  R8
                 ; 0000 00FC if (repetir == 5){
00016b e0e5      	LDI  R30,LOW(5)
00016c 15e8      	CP   R30,R8
00016d f411      	BRNE _0x18
                 ; 0000 00FD renglon++;
00016e 94b3      	INC  R11
                 ; 0000 00FE repetir = 0;
00016f 2488      	CLR  R8
                 ; 0000 00FF }
                 ; 0000 0100 
                 ; 0000 0101 if (renglon == 7) renglon = 0;
                 _0x18:
000170 e0e7      	LDI  R30,LOW(7)
000171 15eb      	CP   R30,R11
000172 f409      	BRNE _0x19
000173 24bb      	CLR  R11
                 ; 0000 0102 break;
                 _0x19:
000174 c024      	RJMP _0x10
                 ; 0000 0103 
                 ; 0000 0104 case 4:
                 _0x17:
000175 30e4      	CPI  R30,LOW(0x4)
000176 e0a0      	LDI  R26,HIGH(0x4)
000177 07fa      	CPC  R31,R26
000178 f481      	BRNE _0x1D
                 ; 0000 0105 
                 ; 0000 0106 filas = obtenerArreglo(numero)[indice];
000179 2da9      	MOV  R26,R9
00017a 27bb      	CLR  R27
00017b df74      	RCALL _obtenerArreglo
00017c d08a      	RCALL SUBOPT_0x4
                 ; 0000 0107 repetir++;
                 ; 0000 0108 if (repetir == 60){
00017d e3ec      	LDI  R30,LOW(60)
00017e 15e8      	CP   R30,R8
00017f f411      	BRNE _0x1B
                 ; 0000 0109 repetir = 0;
000180 2488      	CLR  R8
                 ; 0000 010A numero++;
000181 9493      	INC  R9
                 ; 0000 010B }
                 ; 0000 010C if (numero == 169) {
                 _0x1B:
000182 eae9      	LDI  R30,LOW(169)
000183 15e9      	CP   R30,R9
000184 f419      	BRNE _0x1C
                 ; 0000 010D puede_cambiar = 1;
000185 9468      	SET
000186 f820      	BLD  R2,0
                 ; 0000 010E numero = 0;
000187 2499      	CLR  R9
                 ; 0000 010F }
                 ; 0000 0110 break;
                 _0x1C:
000188 c010      	RJMP _0x10
                 ; 0000 0111 
                 ; 0000 0112 default:
                 _0x1D:
                 ; 0000 0113 
                 ; 0000 0114 filas = modoCuatro[numero][indice];
000189 2de9      	MOV  R30,R9
00018a e0a5      	LDI  R26,LOW(5)
00018b 9fea      	MUL  R30,R26
00018c 01f0      	MOVW R30,R0
00018d 5fe6      	SUBI R30,LOW(-_modoCuatro)
00018e 4ffe      	SBCI R31,HIGH(-_modoCuatro)
00018f d077      	RCALL SUBOPT_0x4
                 ; 0000 0115 repetir++;
                 ; 0000 0116 if (repetir == 120){
000190 e7e8      	LDI  R30,LOW(120)
000191 15e8      	CP   R30,R8
000192 f411      	BRNE _0x1E
                 ; 0000 0117 repetir = 0;
000193 2488      	CLR  R8
                 ; 0000 0118 numero++;
000194 9493      	INC  R9
                 ; 0000 0119 }
                 ; 0000 011A 
                 ; 0000 011B if (numero == 10) {
                 _0x1E:
000195 e0ea      	LDI  R30,LOW(10)
000196 15e9      	CP   R30,R9
000197 f409      	BRNE _0x1F
                 ; 0000 011C cambiar_modo();
000198 df47      	RCALL _cambiar_modo
                 ; 0000 011D }
                 ; 0000 011E }
                 _0x1F:
                 _0x10:
                 ; 0000 011F 
                 ; 0000 0120 
                 ; 0000 0121 PORTC = columnas;
000199 ba45      	OUT  0x15,R4
                 ; 0000 0122 
                 ; 0000 0123 // Contador de anillo
                 ; 0000 0124 switch (columnas){
00019a 2de4      	MOV  R30,R4
00019b e0f0      	LDI  R31,0
                 ; 0000 0125 case 0x01:
00019c d056      	RCALL SUBOPT_0x1
00019d f411      	BRNE _0x23
                 ; 0000 0126 columnas = 0x02;
00019e e0e2      	LDI  R30,LOW(2)
00019f c011      	RJMP _0x3B
                 ; 0000 0127 break;
                 ; 0000 0128 
                 ; 0000 0129 case 0x02:
                 _0x23:
0001a0 d062      	RCALL SUBOPT_0x3
0001a1 f411      	BRNE _0x24
                 ; 0000 012A columnas = 0x04;
0001a2 e0e4      	LDI  R30,LOW(4)
0001a3 c00d      	RJMP _0x3B
                 ; 0000 012B break;
                 ; 0000 012C 
                 ; 0000 012D case 0x04:
                 _0x24:
0001a4 30e4      	CPI  R30,LOW(0x4)
0001a5 e0a0      	LDI  R26,HIGH(0x4)
0001a6 07fa      	CPC  R31,R26
0001a7 f411      	BRNE _0x25
                 ; 0000 012E columnas = 0x08;
0001a8 e0e8      	LDI  R30,LOW(8)
0001a9 c007      	RJMP _0x3B
                 ; 0000 012F break;
                 ; 0000 0130 
                 ; 0000 0131 case 0x08:
                 _0x25:
0001aa 30e8      	CPI  R30,LOW(0x8)
0001ab e0a0      	LDI  R26,HIGH(0x8)
0001ac 07fa      	CPC  R31,R26
0001ad f411      	BRNE _0x27
                 ; 0000 0132 columnas = 0x10;
0001ae e1e0      	LDI  R30,LOW(16)
0001af c001      	RJMP _0x3B
                 ; 0000 0133 break;
                 ; 0000 0134 
                 ; 0000 0135 default:
                 _0x27:
                 ; 0000 0136 columnas = 0x01;
0001b0 e0e1      	LDI  R30,LOW(1)
                 _0x3B:
0001b1 2e4e      	MOV  R4,R30
                 ; 0000 0137 }
                 ; 0000 0138 
                 ; 0000 0139 // Indice
                 ; 0000 013A indice++;
0001b2 9463      	INC  R6
                 ; 0000 013B if (indice == 5) {
0001b3 e0e5      	LDI  R30,LOW(5)
0001b4 15e6      	CP   R30,R6
0001b5 f421      	BRNE _0x28
                 ; 0000 013C indice = 0;
0001b6 2466      	CLR  R6
                 ; 0000 013D cambio_caso++;
0001b7 01f6      	MOVW R30,R12
0001b8 9631      	ADIW R30,1
0001b9 016f      	MOVW R12,R30
                 ; 0000 013E }
                 ; 0000 013F 
                 ; 0000 0140 
                 ; 0000 0141 //PORTC = columnas;
                 ; 0000 0142 
                 ; 0000 0143 switch (modo){
                 _0x28:
0001ba 2de5      	MOV  R30,R5
0001bb e0f0      	LDI  R31,0
                 ; 0000 0144 case 0:
0001bc 9730      	SBIW R30,0
0001bd f431      	BRNE _0x2C
                 ; 0000 0145 if (cambio_caso == 4) cambiar_modo();
0001be e0e4      	LDI  R30,LOW(4)
0001bf e0f0      	LDI  R31,HIGH(4)
0001c0 d04d      	RCALL SUBOPT_0x5
0001c1 f409      	BRNE _0x2D
0001c2 df1d      	RCALL _cambiar_modo
                 ; 0000 0146 break;
                 _0x2D:
0001c3 c01c      	RJMP _0x2B
                 ; 0000 0147 
                 ; 0000 0148 case 1:
                 _0x2C:
0001c4 d02e      	RCALL SUBOPT_0x1
0001c5 f431      	BRNE _0x2E
                 ; 0000 0149 if (cambio_caso == 50) cambiar_modo();
0001c6 e3e2      	LDI  R30,LOW(50)
0001c7 e0f0      	LDI  R31,HIGH(50)
0001c8 d045      	RCALL SUBOPT_0x5
0001c9 f409      	BRNE _0x2F
0001ca df15      	RCALL _cambiar_modo
                 ; 0000 014A break;
                 _0x2F:
0001cb c014      	RJMP _0x2B
                 ; 0000 014B 
                 ; 0000 014C case 2:
                 _0x2E:
0001cc d036      	RCALL SUBOPT_0x3
0001cd f431      	BRNE _0x30
                 ; 0000 014D if (cambio_caso == 50) cambiar_modo();
0001ce e3e2      	LDI  R30,LOW(50)
0001cf e0f0      	LDI  R31,HIGH(50)
0001d0 d03d      	RCALL SUBOPT_0x5
0001d1 f409      	BRNE _0x31
0001d2 df0d      	RCALL _cambiar_modo
                 ; 0000 014E break;
                 _0x31:
0001d3 c00c      	RJMP _0x2B
                 ; 0000 014F 
                 ; 0000 0150 case 3:
                 _0x30:
0001d4 30e3      	CPI  R30,LOW(0x3)
0001d5 e0a0      	LDI  R26,HIGH(0x3)
0001d6 07fa      	CPC  R31,R26
0001d7 f431      	BRNE _0x34
                 ; 0000 0151 if (cambio_caso == 7) cambiar_modo();
0001d8 e0e7      	LDI  R30,LOW(7)
0001d9 e0f0      	LDI  R31,HIGH(7)
0001da d033      	RCALL SUBOPT_0x5
0001db f409      	BRNE _0x33
0001dc df03      	RCALL _cambiar_modo
                 ; 0000 0152 break;
                 _0x33:
0001dd c002      	RJMP _0x2B
                 ; 0000 0153 
                 ; 0000 0154 default:
                 _0x34:
                 ; 0000 0155 if (puede_cambiar) cambiar_modo();
0001de fc20      	SBRC R2,0
0001df df00      	RCALL _cambiar_modo
                 ; 0000 0156 }
                 _0x2B:
                 ; 0000 0157 
                 ; 0000 0158 
                 ; 0000 0159 PORTD = filas;
0001e0 ba72      	OUT  0x12,R7
                 ; 0000 015A if(modo==4) delay_ms(4);
0001e1 e0e4      	LDI  R30,LOW(4)
0001e2 15e5      	CP   R30,R5
0001e3 f411      	BRNE _0x36
0001e4 e0a4      	LDI  R26,LOW(4)
0001e5 c006      	RJMP _0x3C
                 ; 0000 015B else if(modo==5) delay_ms(5);
                 _0x36:
0001e6 e0e5      	LDI  R30,LOW(5)
0001e7 15e5      	CP   R30,R5
0001e8 f411      	BRNE _0x38
0001e9 e0a5      	LDI  R26,LOW(5)
0001ea c001      	RJMP _0x3C
                 ; 0000 015C else delay_ms(10);
                 _0x38:
0001eb e0aa      	LDI  R26,LOW(10)
                 _0x3C:
0001ec e0b0      	LDI  R27,0
0001ed d031      	RCALL _delay_ms
                 ; 0000 015D 
                 ; 0000 015E }
0001ee cf4e      	RJMP _0xB
                 ; 0000 015F }
                 _0x3A:
0001ef cfff      	RJMP _0x3A
                 ; .FEND
                 
                 	.DSEG
                 _modoCero:
0000e0           	.BYTE 0x7
                 _modoUno:
0000e7           	.BYTE 0x23
                 _modoCuatro:
00010a           	.BYTE 0x32
                 _modoCinco:
00013c           	.BYTE 0xAE
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
0001f0 95e0      	COM  R30
0001f1 2e7e      	MOV  R7,R30
0001f2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x1:
0001f3 30e1      	CPI  R30,LOW(0x1)
0001f4 e0a0      	LDI  R26,HIGH(0x1)
0001f5 07fa      	CPC  R31,R26
0001f6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:20 WORDS
                 SUBOPT_0x2:
0001f7 2deb      	MOV  R30,R11
0001f8 e0a5      	LDI  R26,LOW(5)
0001f9 9fea      	MUL  R30,R26
0001fa 01f0      	MOVW R30,R0
0001fb 51e9      	SUBI R30,LOW(-_modoUno)
0001fc 4fff      	SBCI R31,HIGH(-_modoUno)
0001fd 01df      	MOVW R26,R30
0001fe 27ee      	CLR  R30
0001ff 0da6      	ADD  R26,R6
000200 1fbe      	ADC  R27,R30
000201 91ec      	LD   R30,X
000202 cfed      	RJMP SUBOPT_0x0
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x3:
000203 30e2      	CPI  R30,LOW(0x2)
000204 e0a0      	LDI  R26,HIGH(0x2)
000205 07fa      	CPC  R31,R26
000206 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x4:
000207 01df      	MOVW R26,R30
000208 27ee      	CLR  R30
000209 0da6      	ADD  R26,R6
00020a 1fbe      	ADC  R27,R30
00020b 907c      	LD   R7,X
00020c 9483      	INC  R8
00020d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x5:
00020e 15ec      	CP   R30,R12
00020f 05fd      	CPC  R31,R13
000210 9508      	RET
                 
                 ;RUNTIME LIBRARY
                 
                 	.CSEG
                 __SAVELOCR6:
000211 935a      	ST   -Y,R21
                 __SAVELOCR5:
000212 934a      	ST   -Y,R20
                 __SAVELOCR4:
000213 933a      	ST   -Y,R19
                 __SAVELOCR3:
000214 932a      	ST   -Y,R18
                 __SAVELOCR2:
000215 931a      	ST   -Y,R17
000216 930a      	ST   -Y,R16
000217 9508      	RET
                 
                 __LOADLOCR6:
000218 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000219 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
00021a 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
00021b 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
00021c 8119      	LDD  R17,Y+1
00021d 8108      	LD   R16,Y
00021e 9508      	RET
                 
                 _delay_ms:
00021f 9610      	adiw r26,0
000220 f039      	breq __delay_ms1
                 __delay_ms0:
000221 95a8      	wdr
                +
000222 ef8a     +LDI R24 , LOW ( 0xFA )
000223 e090     +LDI R25 , HIGH ( 0xFA )
                +__DELAY_USW_LOOP :
000224 9701     +SBIW R24 , 1
000225 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA
000226 9711      	sbiw r26,1
000227 f7c9      	brne __delay_ms0
                 __delay_ms1:
000228 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega8535 register use summary:
r0 :   8 r1 :   1 r2 :   3 r3 :   0 r4 :   4 r5 :   7 r6 :   7 r7 :   3 
r8 :  12 r9 :   8 r10:   0 r11:  11 r12:   4 r13:   2 r14:   0 r15:   0 
r16:   6 r17:   5 r18:   5 r19:   4 r20:   5 r21:   2 r22:   2 r23:   0 
r24:   9 r25:   3 r26:  40 r27:  11 r28:   5 r29:   1 r30: 141 r31:  24 
x  :   7 y  :  12 z  :   8 
Registers used: 30 out of 35 (85.7%)

ATmega8535 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   4 add   :   4 
adiw  :   6 and   :   0 andi  :   0 asr   :   0 bclr  :   0 bld   :   2 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :   2 
brge  :   1 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 
brlt  :   0 brmi  :   0 brne  :  35 brpl  :   0 brsh  :   0 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 cbi   :   0 
cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 clr   :  21 
cls   :   0 clt   :   1 clv   :   0 clz   :   0 com   :   1 cp    :  15 
cpc   :   9 cpi   :   7 cpse  :   0 dec   :   1 des   :   0 eor   :   0 
fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 in    :   0 
inc   :  10 ld    :   5 ldd   :   5 ldi   :  75 lds   :   0 lpm   :   7 
lsl   :   0 lsr   :   0 mov   :  10 movw  :  17 mul   :   2 muls  :   0 
mulsu :   0 neg   :   0 nop   :   0 or    :   0 ori   :   0 out   :  42 
pop   :   0 push  :   0 rcall :  28 ret   :  10 reti  :   0 rjmp  :  42 
rol   :   0 ror   :   0 sbc   :   0 sbci  :   5 sbi   :   0 sbic  :   0 
sbis  :   0 sbiw  :   8 sbr   :   0 sbrc  :   1 sbrs  :   0 sec   :   0 
seh   :   0 sei   :   0 sen   :   0 ser   :   0 ses   :   0 set   :   1 
sev   :   0 sez   :   0 sleep :   0 spm   :   0 st    :  10 std   :   0 
sts   :   0 sub   :   0 subi  :   5 swap  :   0 tst   :   0 wdr   :   1 

Instructions used: 34 out of 114 (29.8%)

ATmega8535 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000452    788    318   1106    8192  13.5%
[.dseg] 0x000060 0x0001ea      0    266    266     512  52.0%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 11 warnings
